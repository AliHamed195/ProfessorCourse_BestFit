//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProfessorCourse_BestFit.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProfessorCourseBestFit1Entities1 : DbContext
    {
        public ProfessorCourseBestFit1Entities1()
            : base("name=ProfessorCourseBestFitEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<CourseKeyword> CourseKeywords { get; set; }
        public virtual DbSet<CourseProgram> CoursePrograms { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Keyword> Keywords { get; set; }
        public virtual DbSet<Permission> Permissions { get; set; }
        public virtual DbSet<Program> Programs { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Semester> Semesters { get; set; }
        public virtual DbSet<SemesterCourse> SemesterCourses { get; set; }
        public virtual DbSet<UserCourse> UserCourses { get; set; }
        public virtual DbSet<UserDepartment> UserDepartments { get; set; }
        public virtual DbSet<UserKeyword> UserKeywords { get; set; }
        public virtual DbSet<UserProgram> UserPrograms { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int AddRemove(Nullable<int> actionID, string @string, string query, string bIGDELIMER, string sMALLDELIMER)
        {
            var actionIDParameter = actionID.HasValue ?
                new ObjectParameter("actionID", actionID) :
                new ObjectParameter("actionID", typeof(int));
    
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var queryParameter = query != null ?
                new ObjectParameter("Query", query) :
                new ObjectParameter("Query", typeof(string));
    
            var bIGDELIMERParameter = bIGDELIMER != null ?
                new ObjectParameter("BIGDELIMER", bIGDELIMER) :
                new ObjectParameter("BIGDELIMER", typeof(string));
    
            var sMALLDELIMERParameter = sMALLDELIMER != null ?
                new ObjectParameter("SMALLDELIMER", sMALLDELIMER) :
                new ObjectParameter("SMALLDELIMER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRemove", actionIDParameter, stringParameter, queryParameter, bIGDELIMERParameter, sMALLDELIMERParameter);
        }
    
        public virtual int CourseDeleteRelations(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CourseDeleteRelations", courseIDParameter);
        }
    
        public virtual ObjectResult<CourseProfessors_Result> CourseProfessors(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseProfessors_Result>("CourseProfessors", courseIDParameter);
        }
    
        public virtual ObjectResult<CoursePrograms1_Result> CoursePrograms1(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CoursePrograms1_Result>("CoursePrograms1", courseIDParameter);
        }
    
        public virtual ObjectResult<CourseProgramToAdd_Result> CourseProgramToAdd(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseProgramToAdd_Result>("CourseProgramToAdd", courseIDParameter);
        }
    
        public virtual ObjectResult<CourseUsersToBeProfessors_Result> CourseUsersToBeProfessors(Nullable<int> courseID)
        {
            var courseIDParameter = courseID.HasValue ?
                new ObjectParameter("CourseID", courseID) :
                new ObjectParameter("CourseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CourseUsersToBeProfessors_Result>("CourseUsersToBeProfessors", courseIDParameter);
        }
    
        public virtual int DeleteAll(Nullable<int> iD, string section, string target)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var sectionParameter = section != null ?
                new ObjectParameter("section", section) :
                new ObjectParameter("section", typeof(string));
    
            var targetParameter = target != null ?
                new ObjectParameter("target", target) :
                new ObjectParameter("target", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAll", iDParameter, sectionParameter, targetParameter);
        }
    
        public virtual ObjectResult<DepartmentAddRemoveManagers_Result> DepartmentAddRemoveManagers(Nullable<int> departmentID)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepartmentAddRemoveManagers_Result>("DepartmentAddRemoveManagers", departmentIDParameter);
        }
    
        public virtual ObjectResult<Departmentemployees_Result> Departmentemployees(Nullable<int> departmentID)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Departmentemployees_Result>("Departmentemployees", departmentIDParameter);
        }
    
        public virtual ObjectResult<DepartmentEmployeesToAdd_Result> DepartmentEmployeesToAdd(Nullable<int> departmentID)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepartmentEmployeesToAdd_Result>("DepartmentEmployeesToAdd", departmentIDParameter);
        }
    
        public virtual ObjectResult<DepartmentManagers_Result> DepartmentManagers(Nullable<int> departmentID)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DepartmentManagers_Result>("DepartmentManagers", departmentIDParameter);
        }
    
        public virtual ObjectResult<ProgramCourses_Result> ProgramCourses(Nullable<int> programID)
        {
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProgramCourses_Result>("ProgramCourses", programIDParameter);
        }
    
        public virtual ObjectResult<ProgramCoursesToAdd_Result> ProgramCoursesToAdd(Nullable<int> programID)
        {
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProgramCoursesToAdd_Result>("ProgramCoursesToAdd", programIDParameter);
        }
    
        public virtual ObjectResult<ProgramManagers_Result> ProgramManagers(Nullable<int> programID)
        {
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProgramManagers_Result>("ProgramManagers", programIDParameter);
        }
    
        public virtual ObjectResult<ProgramManagersToAdd_Result> ProgramManagersToAdd(Nullable<int> programID)
        {
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProgramManagersToAdd_Result>("ProgramManagersToAdd", programIDParameter);
        }
    
        public virtual int spCreateCourseKeywords(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateCourseKeywords", courseIdParameter);
        }
    
        public virtual int spCreateKeywordCourse(Nullable<int> keywordId)
        {
            var keywordIdParameter = keywordId.HasValue ?
                new ObjectParameter("KeywordId", keywordId) :
                new ObjectParameter("KeywordId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateKeywordCourse", keywordIdParameter);
        }
    
        public virtual int spCreateKeywordUser(Nullable<int> keywordId)
        {
            var keywordIdParameter = keywordId.HasValue ?
                new ObjectParameter("KeywordId", keywordId) :
                new ObjectParameter("KeywordId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateKeywordUser", keywordIdParameter);
        }
    
        public virtual int spCreateRolePermissions(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateRolePermissions", roleIdParameter);
        }
    
        public virtual int spCreateUserKeywords(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCreateUserKeywords", userIdParameter);
        }
    
        public virtual ObjectResult<spGetAllKeywordsIncludeMatching_Result> spGetAllKeywordsIncludeMatching(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllKeywordsIncludeMatching_Result>("spGetAllKeywordsIncludeMatching", userIdParameter);
        }
    
        public virtual ObjectResult<spGetAllKeywordsIncludeMatchingCourse_Result> spGetAllKeywordsIncludeMatchingCourse(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAllKeywordsIncludeMatchingCourse_Result>("spGetAllKeywordsIncludeMatchingCourse", courseIdParameter);
        }
    
        public virtual ObjectResult<spGetCoursesByUserId_Result> spGetCoursesByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCoursesByUserId_Result>("spGetCoursesByUserId", userIdParameter);
        }
    
        public virtual int spGetUserRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUserRoles");
        }
    
        public virtual int spGetUserRolesById(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetUserRolesById", userIdParameter);
        }
    
        public virtual ObjectResult<spGetUsersByCourseId_Result> spGetUsersByCourseId(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetUsersByCourseId_Result>("spGetUsersByCourseId", courseIdParameter);
        }
    
        public virtual int spIsRowExist(string tableName, string columnName, string rowValue)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("columnName", columnName) :
                new ObjectParameter("columnName", typeof(string));
    
            var rowValueParameter = rowValue != null ?
                new ObjectParameter("rowValue", rowValue) :
                new ObjectParameter("rowValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spIsRowExist", tableNameParameter, columnNameParameter, rowValueParameter);
        }
    
        public virtual ObjectResult<spKeywordsByCourseId_Result> spKeywordsByCourseId(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spKeywordsByCourseId_Result>("spKeywordsByCourseId", courseIdParameter);
        }
    
        public virtual ObjectResult<spKeywordsByUserId_Result> spKeywordsByUserId(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spKeywordsByUserId_Result>("spKeywordsByUserId", userIdParameter);
        }
    
        public virtual ObjectResult<spPermissionByRoleId_Result> spPermissionByRoleId(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPermissionByRoleId_Result>("spPermissionByRoleId", roleIdParameter);
        }
    
        public virtual ObjectResult<string> spUpdateCourseKeywords(string keywords, Nullable<int> courseId)
        {
            var keywordsParameter = keywords != null ?
                new ObjectParameter("Keywords", keywords) :
                new ObjectParameter("Keywords", typeof(string));
    
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spUpdateCourseKeywords", keywordsParameter, courseIdParameter);
        }
    
        public virtual ObjectResult<string> spUpdateRolePermissions(string permissions, Nullable<int> roleId)
        {
            var permissionsParameter = permissions != null ?
                new ObjectParameter("permissions", permissions) :
                new ObjectParameter("permissions", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spUpdateRolePermissions", permissionsParameter, roleIdParameter);
        }
    
        public virtual ObjectResult<string> spUpdateUserKeywords(string keywords, Nullable<int> userId)
        {
            var keywordsParameter = keywords != null ?
                new ObjectParameter("Keywords", keywords) :
                new ObjectParameter("Keywords", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spUpdateUserKeywords", keywordsParameter, userIdParameter);
        }
    
        public virtual int spUserPermissionsName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserPermissionsName");
        }
    
        public virtual int spUserRolesName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUserRolesName");
        }
    }
}
